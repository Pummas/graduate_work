version: '3.7'
services:
  nginx:
    image: nginx:1.23.3-alpine
    volumes:
      - ./nginx/proxy/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/proxy/configs:/etc/nginx/conf.d:ro
    ports:
      - "80:80"
    depends_on:
      - ugc_service

  zookeeper-1:
    image: confluentinc/cp-zookeeper:7.3.0
    container_name: zookeeper-1
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
      - zookeeper_1_data:/var/lib/zookeeper/data

  broker-1:
    image: confluentinc/cp-kafka:7.3.0
    container_name: broker-1
    depends_on:
      - zookeeper-1
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ADVERTISED_LISTENERS: INSIDE_DOCKER://broker-1:9092,ON_HOST://localhost:39092,INTERNAL://broker-1:29092
    env_file:
      - .env
    volumes:
      - broker_1_data:/var/lib/kafka/data

  etl_ugc:
    image: etl_ugc
    restart: "always"
    container_name: etl_kafka
    env_file:
      - .env
    depends_on:
      - broker-1

  zookeeper:
    image: zookeeper:3.5
    container_name: zookeeper
    hostname: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data

  clickhouse-node1:
    image: yandex/clickhouse-server:21.3
    container_name: clickhouse-node1
    hostname: clickhouse-node1
    volumes:
      - clickhouse_1_data:/var/lib/clickhouse/
    depends_on:
      - zookeeper

  ugc_service:
    restart: "always"
    image: ugc_service
    container_name: ugc_service
    env_file:
        - .env
    depends_on:
        - broker-1

  mongodb_ugc:
    image: mongo:latest
    environment:
      MONGO_INITDB_DATABASE: prod-db
      MONGO_INITDB_ROOT_USERNAME: user_name
      MONGO_INITDB_ROOT_PASSWORD: user_password
    ports:
      - "27017:27017"
    volumes:
      - mongodb_ugc_data:/data/db

  auth:
    restart: "always"
    image: auth_service
    container_name: auth
    volumes:
      - ./auth/src/:/opt/app/
    env_file:
      - .env
    depends_on:
      - postgres_auth
      - redis_auth

  redis_auth:
    image: redis:7.0.5-alpine
    container_name: redis_auth
    command: redis-server --requirepass ${REDIS_AUTH_PASSWORD} --save 20 1
    volumes:
      - redis_auth_data:/data

  postgres_auth:
    image: postgres:15.1-alpine
    container_name: postgres_auth
    volumes:
      - postgres_auth_data:/var/lib/postgresql/data/
    environment:
      - POSTGRES_USER=${PG_AUTH_USER}
      - POSTGRES_PASSWORD=${PG_AUTH_PASSWORD}
      - POSTGRES_DB=${PG_AUTH_DB_NAME}

  backend:
    restart: "always"
    image: backend_service
    container_name: backend
    volumes:
      - ./backend/src/:/opt/app/
    env_file:
      - .env
    depends_on:
      - elasticsearch_movies
      - redis_backend

  redis_backend:
    image: redis:7.0.5-alpine
    container_name: redis_backend
    command: redis-server --requirepass ${REDIS_BACKEND_PASSWORD} --maxmemory ${REDIS_BACKEND_MAXMEMORY} --maxmemory-policy allkeys-lru

  elasticsearch_movies:
    image: elasticsearch:8.6.1
    container_name: elasticsearch_movies
    volumes:
      - elasticsearch_movies_data:/usr/share/elasticsearch/data
    environment:
      - xpack.security.enabled=false
      - discovery.type=single-node
      - ES_JAVA_OPTS=-Xms1g -Xmx1g
    ulimits:
      nofile:
        soft: 65536
        hard: 65536

  minio-0:
    image: minio/minio:RELEASE.2023-03-24T21-41-23Z
    command: server --console-address ":9001" /data/
    environment:
     MINIO_ROOT_USER: ${MINIO_USER}
     MINIO_ROOT_PASSWORD: ${MINIO_PASSWORD}
     MINIO_PROMETHEUS_AUTH_TYPE: jwt
     MINIO_PROMETHEUS_URL: prometheus:9000
     MINIO_PROMETHEUS_JOB_ID: minio-job
    volumes:
     - minio_0_data:/data

  nginx-minio-0:
    image: nginx:1.23.3-alpine
    volumes:
      - ./nginx/s3_proxy/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/s3_proxy/configs/s3_0.conf:/etc/nginx/conf.d/s3_0.conf:ro
    ports:
      - "7000:80"
    depends_on:
      - minio-0

  minio-1:
    image: minio/minio:RELEASE.2023-03-24T21-41-23Z
    command: server --console-address ":9001" /data/
    environment:
     MINIO_ROOT_USER: ${MINIO_USER}
     MINIO_ROOT_PASSWORD: ${MINIO_PASSWORD}
     MINIO_PROMETHEUS_AUTH_TYPE: jwt
     MINIO_PROMETHEUS_URL: prometheus:9000
     MINIO_PROMETHEUS_JOB_ID: minio-job
    volumes:
     - minio_1_data:/data

  nginx-minio-1:
    image: nginx:1.23.3-alpine
    volumes:
      - ./nginx/s3_proxy/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/s3_proxy/configs/s3_1.conf:/etc/nginx/conf.d/s3_1.conf:ro
    ports:
      - "7010:80"
    depends_on:
      - minio-1

  minio-2:
    image: minio/minio:RELEASE.2023-03-24T21-41-23Z
    command: server --console-address ":9001" /data/
    environment:
     MINIO_ROOT_USER: ${MINIO_USER}
     MINIO_ROOT_PASSWORD: ${MINIO_PASSWORD}
     MINIO_PROMETHEUS_AUTH_TYPE: jwt
     MINIO_PROMETHEUS_URL: prometheus:9000
     MINIO_PROMETHEUS_JOB_ID: minio-job
    volumes:
     - minio_2_data:/data

  nginx-minio-2:
    image: nginx:1.23.3-alpine
    volumes:
      - ./nginx/s3_proxy/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/s3_proxy/configs/s3_2.conf:/etc/nginx/conf.d/s3_2.conf:ro
    ports:
      - "7020:80"
    depends_on:
      - minio-2

  prometheus:
    image: prom/prometheus:v2.43.0
    volumes:
      - ./prometheus:/etc/prometheus
      - prometheus_data:/data

  postgres_movies:
    image: postgres:15.1-alpine
    container_name: postgres_movies
    volumes:
      - postgres_movies_data:/var/lib/postgresql/data/
      - ./movies_admin/config/sql/init_db.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5436:5432"
    restart: always
    environment:
      - POSTGRES_USER=${PG_MOVIES_USER}
      - POSTGRES_PASSWORD=${PG_MOVIES_PASSWORD}
      - POSTGRES_DB=${PG_MOVIES_DB_NAME}

  admin_movies:
    container_name: admin_movies
    build:
      context: ./movies_admin
      dockerfile: ./Dockerfile
    command: /bin/bash -c "gunicorn --bind 0.0.0.0:8000 config.wsgi:application --threads 2 --timeout 600"
    volumes:
      - static_value:/code/static/
      - media_value:/code/media/
    restart: always
    env_file:
      - .env
    ports:
      - "${DJANGO_MOVIES_PORT}:8000"
    links:
      - "minio_0:minio0"
    depends_on:
      - postgres_movies
      - minio_0

  createbuckets:
    image: minio/mc
    depends_on:
      - minio_0
    links:
      - "minio_0:minio0"
    entrypoint: >
      /bin/sh -c "
      /usr/bin/mc config host add myminio http://minio0:9000 user password;
      /usr/bin/mc admin info myminio;
      /usr/bin/mc rm -r --force myminio/online-movies;
      /usr/bin/mc mb myminio/online-movies;
      /usr/bin/mc policy download myminio/online-movies;
      exit 0;
      "

volumes:
  zookeeper_1_data:
  broker_1_data:
  zookeeper_data:
  clickhouse_1_data:
  mongodb_ugc_data:
  redis_auth_data:
  postgres_auth_data:
  elasticsearch_movies_data:
  minio_0_data:
  minio_1_data:
  minio_2_data:
  static_value:
  media_value:
  postgres_movies_data:
  prometheus_data:
